/*
 * Licensed Materials - Property of tenxcloud.com
 * (C) Copyright 2020 TenxCloud. All Rights Reserved.
 * 2020  @author tenxcloud
 */

package phases

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	"k8s.io/klog"
	"k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases/workflow"
	cmdutil "k8s.io/kubernetes/cmd/kubeadm/app/cmd/util"
	kubeadmconstants "k8s.io/kubernetes/cmd/kubeadm/app/constants"
	haproxyphase "k8s.io/kubernetes/cmd/kubeadm/app/phases/haproxy"
)

var (
	haproxyLocalExample = cmdutil.Examples(`
		# Generates the static Pod manifest file for haproxy, functionally
		# equivalent to what is generated by kubeadm init.
		kubeadm init phase haproxy local

		# Generates the static Pod manifest file for haproxy using options
		# read from a configuration file.
		kubeadm init phase haproxy local --config config.yaml
		`)
)

func NewHaproxyPhase() workflow.Phase {
	return workflow.Phase{
		Name:  "haproxy",
		Short: "Generate static pod manifest file for local haproxy",
		Long:  cmdutil.MacroCommandLongDescription,
		Phases: []workflow.Phase{
			newHaproxyLocalSubPhase(),
		},
	}
}

func newHaproxyLocalSubPhase() workflow.Phase {
	phase := workflow.Phase{
		Name:    "local",
		Short:   "Generate the static Pod manifest file for a local, single-node local haproxy instance",
		Example: haproxyLocalExample,
		Run:     runHaproxyPhaseLocal(),
	}
	return phase
}

func runHaproxyPhaseLocal() func(c workflow.RunData) error {
	return func(c workflow.RunData) error {
		data, ok := c.(InitData)
		if !ok {
			return errors.New("haproxy phase invoked with an invalid data struct")
		}
		cfg := data.Cfg()
		if cfg.LoadBalances == nil && cfg.Masters == nil {
			klog.Warning("loadbalances and master list is empty, skip creating haproxy manifest pods for high availability")
			return nil
		}
		var loadbalances []string
		if cfg.Masters != nil {
			loadbalances = cfg.Masters
		}
		if cfg.LoadBalances != nil {
			loadbalances = cfg.LoadBalances
		}

		if loadbalances != nil {
			if !data.DryRun() {
				if err := os.MkdirAll(filepath.Join(kubeadmconstants.KubernetesDir, haproxyphase.DefaultHaproxyDir), 0700); err != nil {
					return errors.Wrapf(err, "failed to create haproxy directory %q", haproxyphase.DefaultHaproxyDir)
				}
			} else {
				fmt.Printf("[dryrun] Would ensure that %q directory is present\n", haproxyphase.DefaultHaproxyDir)
			}
			fmt.Printf("[haproxy] Creating static Pod manifest for local haproxy in %q\n", data.ManifestDir())

			// save haproxy config into /etc/kubernetes/haproxy directory
			haproxyConfigPath := filepath.Join(kubeadmconstants.KubernetesDir, haproxyphase.DefaultHaproxyDir, haproxyphase.DefaultHaproxyConfig)
			if err := haproxyphase.CreateHaproxyConfig(cfg.LocalAPIEndpoint.BindPort, loadbalances, haproxyConfigPath); err != nil {
				return errors.Wrapf(err, "failed to create haproxy config %q", haproxyConfigPath)
			}
			// create haproxy manifest
			haproxyManifestFile := filepath.Join(kubeadmconstants.KubernetesDir, kubeadmconstants.ManifestsSubDirName, haproxyphase.HaproxyManifestName)
			if err := haproxyphase.CreateLocalHaproxyStaticPodManifestFile(cfg, haproxyManifestFile); err != nil {
				return errors.Wrapf(err, "failed to create haproxy manifest %q", haproxyManifestFile)
			}
		}
		return nil
	}
	return nil
}
